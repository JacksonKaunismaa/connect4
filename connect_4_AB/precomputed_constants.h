#pragma once

// constants used in the AB_board_class
 enum class Players
{
	WHITE = 30000,
	BLACK = -30000,
	NONE = 0,
};


const int col_height[256] = { 7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 6, -10, -10, -10,
-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
-10, -10, 5, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
-10, -10, -10, -10, 4, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 3, -10, -10, -10, -10, -10, -10, -10, 2, -10, -10,
-10, 1, -10, 0, -1
};
// must be const so that in each source file they are #included in, making them const so compile time and can use their value directly but also so they have static
// but also so they have static duration so their definitions aren't visible outside that src file
 
//const std::vector<std::vector<char>> dl_ur_diag_hash = { { 0 },{ 0 },{ 0 },{ 0 },{ 0 },{},{},{},   
//{ 0 },{ 9, 0 },{ 9, 0 },{ 9, 0 },{ 9, 0 },{ 9 },{},{},  
//{ 0 },{ 9, 0 },{ 18, 9, 0 },{ 18, 9, 0 },{ 18, 9, 0 },{ 18, 9 },{ 18 },{},   
//{ 0 },{ 9, 0 },{ 18, 9, 0 },{ 27, 18, 9, 0 },{ 27, 18, 9, 0 },{ 27, 18, 9 },{ 27, 18 },{ 27 },
//{ 0 },{ 9, 0 },{ 18, 9, 0 },{ 27, 18, 9, 0 },{ 27, 18, 9, 0 },{ 27, 18, 9 },{ 27, 18 },{ 27 },  
//{},{ 9 },{ 18, 9 },{ 27, 18, 9 },{ 27, 18, 9 },{ 27, 18, 9 },{ 27, 18 },{ 27 },    
//{},{},{ 18 },{ 27, 18 },{ 27, 18 },{ 27, 18 },{ 27, 18 },{ 27 },
//{},{},{},{ 27 },{ 27 },{ 27 },{ 27 },{ 27 } };
const char diag_shift_dl_ur[4] = { 0, 9, 18, 27 };
const char diag_shift_ul_dr[4] = { 0, 7, 14, 21 };

const char dl_ur_diag_idx[64][2] = { {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, -1}, {0, -1}, {0, -1},   // specify the indices of diag_shift_dl_ur to iterate over
{0, 0}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1, 1}, {0, -1}, {0, -1},  // the 0, -1 index means no values will be checked
{0, 0}, {0, 1}, {0, 2}, {0, 2}, {0, 2}, {1, 2}, {2, 2}, {0, -1},
{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 3}, {1, 3}, {2, 3}, {3, 3},
{0, 0}, {0, 1},{ 0, 2 },{ 0, 3 },{ 0, 3 },{ 1, 3 },{ 2, 3 },{ 3, 3 },
{0, -1}, {1, 1}, {1, 2}, {1, 3}, {1, 3}, {1, 3}, {2, 3}, {3, 3},
{0, -1}, {0, -1}, {2, 2}, {2, 3}, {2, 3}, {2, 3}, {2, 3}, {3, 3},
{0, -1}, {0, -1}, {0, -1}, {3, 3}, {3, 3}, {3, 3}, {3, 3}, {3, 3} };

//const std::vector<std::vector<char>> ul_dr_diag_hash = { {},{},{},{ 21 },{ 21 },{ 21 },{ 21 },{ 21 },
//{},{},{ 14 },{ 21, 14 },{ 21, 14 },{ 21, 14 },{ 21, 14 },{ 21 },
//{},{ 7 },{ 14, 7 },{ 21, 14, 7 },{ 21, 14, 7 },{ 21, 14, 7 },{ 21, 14 },{ 21 },
//{ 0 },{ 7, 0 },{ 14, 7, 0 },{ 21, 14, 7, 0 },{ 21, 14, 7, 0 },{ 21, 14, 7 },{ 21, 14 },{ 21 },
//{ 0 },{ 7, 0 },{ 14, 7, 0 },{ 21, 14, 7, 0 },{ 21, 14, 7, 0 },{ 21, 14, 7 },{ 21, 14 },{ 21 },
//{ 0 },{ 7, 0 },{ 14, 7, 0 },{ 14, 7, 0 },{ 14, 7, 0 },{ 14, 7 },{ 14 },{},
//{ 0 },{ 7, 0 },{ 7, 0 },{ 7, 0 },{ 7, 0 },{ 7 },{},{},
//{ 0 },{ 0 },{ 0 },{ 0 },{ 0 },{},{},{} };

const char ul_dr_diag_idx[64][2] = { { 0, -1 },{ 0, -1 },{ 0, -1 },{ 3, 3 },{ 3, 3 },{ 3, 3 },{ 3, 3 },{ 3, 3 },
{ 0, -1 },{ 0, -1 },{ 2, 2 },{ 2, 3 },{ 2, 3 },{ 2, 3 },{ 2, 3 },{ 3, 3 },
{ 0, -1 },{ 1, 1 },{ 1, 2 },{ 1, 3 },{ 1, 3 },{ 1, 3 },{ 2, 3 },{ 3, 3 },
{ 0, 0 },{ 0, 1 },{ 0, 2 },{ 0, 3 },{ 0, 3 },{ 1, 3 },{ 2, 3 },{ 3, 3 },
{ 0, 0 },{ 0, 1 },{ 0, 2 },{ 0, 3 },{ 0, 3 },{ 1, 3 },{ 2, 3 },{ 3, 3 }, 
{ 0, 0 },{ 0, 1 },{ 0, 2 },{ 0, 2 },{ 0, 2 },{ 1, 2 },{ 2, 2 },{ 0, -1 },
{ 0, 0 },{ 0, 1 },{ 0, 1 },{ 0, 1 },{ 0, 1 },{ 1, 1 },{ 0, -1 },{ 0, -1 }, 
{ 0, 0 },{ 0, 0 },{ 0, 0 },{ 0, 0 },{ 0, 0 },{ 0, -1 },{ 0, -1 },{ 0, -1 } };

const uint64_t right1 = 0b0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0001;
const uint64_t left1 = 0b1000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;

const uint64_t bit_mask = 0b11111111;
const uint64_t col_0 = bit_mask << 56;
const uint64_t col_1 = bit_mask << 48;
const uint64_t col_2 = bit_mask << 40;
const uint64_t col_3 = bit_mask << 32;
const uint64_t col_4 = bit_mask << 24;
const uint64_t col_5 = bit_mask << 16;
const uint64_t col_6 = bit_mask << 8;
const uint64_t col_7 = bit_mask << 0;

const uint64_t cols[8] = { col_0,   // pre-computed way to refer to each col
						   col_1,
						   col_2,
						   col_3,
						   col_4,
						   col_5,
						   col_6,
						   col_7 };

const uint64_t row_test0 = 0b1000'0000'1000'0000'1000'0000'1000'0000'0000'0000'0000'0000'0000'0000'0000'0000;  // pre-computed to check for row wins
const uint64_t row_test1 = 0b0000'0000'1000'0000'1000'0000'1000'0000'1000'0000'0000'0000'0000'0000'0000'0000;  // pre-computed to check for row wins
const uint64_t row_test2 = 0b0000'0000'0000'0000'1000'0000'1000'0000'1000'0000'1000'0000'0000'0000'0000'0000;  // pre-computed to check for row wins
const uint64_t row_test3 = 0b0000'0000'0000'0000'0000'0000'1000'0000'1000'0000'1000'0000'1000'0000'0000'0000;  // pre-computed to check for row wins
const uint64_t row_test4 = 0b0000'0000'0000'0000'0000'0000'0000'0000'1000'0000'1000'0000'1000'0000'1000'0000;  // pre-computed to check for row wins


const uint64_t col_test = 0b1111'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;
const uint64_t diag_test_dl_ur = 0b0000'0000'0000'0000'0000'0000'0000'0000'0000'1000'0000'0100'0000'0010'0000'0001;   // the / check (init = far top right (as far right as possible))
const uint64_t diag_test_ul_dr = 0b0000'0000'0000'0000'0000'0000'0000'0000'0000'0001'0000'0010'0000'0100'0000'1000;

static unsigned char white_moves[8] = { 3, 4, 2, 5, 1, 6, 0, 7 };  // default move order (center-centric?), is modulated slightly over time to focus on side of the board where action is happening
static unsigned char black_moves[8] = { 3, 4, 2, 5, 1, 6, 0, 7 };


const uint64_t row_rl = 0b1000'0000'1000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;   // checking the 2 squares right or left of another group of 2 in a row to check for open squares in parallel
const uint64_t row_split = 0b1000'0000'0000'0000'0000'1000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;   // check the squares on either side of a group of 2
const uint64_t row_half_split = 0b1000'0000'0000'0000'1000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;   // check for W_W_ pattern

const uint64_t diag_NE_rl = 0b1000'0000'0100'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;  // checking 2 squares diagonally right or left of another of 2 diagonal to each other to check open squares
const uint64_t diag_NE_split = 0b1000'0000'0000'0000'0000'0000'0001'0000'0000'0000'0000'0000'0000'0000'0000'0000;  // check the diag positions on either side of a diag group of 2

const uint64_t diag_SE_rl = 0b0100'0000'1000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;    // see diag_NE_rl 
const uint64_t diag_SE_split = 0b0100'0000'1000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;  // see diag_NE_split
